import asyncio
import random
from aiogram import Bot, Dispatcher, types, filters
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage


TOKEN = "7247194448:AAFIINumA5xA9QU2jv8afaMvUmQeTJaPHrA"
bot = Bot(TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)


class FeedbackState(StatesGroup):
    complaint = State()
    suggestion = State()

class AuthState(StatesGroup):
    waiting_for_login = State()
    waiting_for_password = State()

# === –ü–ï–†–ï–ú–ï–ù–ù–´–ï === #
present_teachers = set()
fake_users = {
    "STUDENT-1234": {"password": "1234", "role": "–°—Ç—É–¥–µ–Ω—Ç", "direction": "IT"},
    "PARENT-5678": {"password": "5678", "role": "–†–æ–¥–∏—Ç–µ–ª—å", "direction": "–Æ—Ä–∏—Å–ø—Ä—É–¥–µ–Ω—Ü–∏—è"},
    "TEACHER-9999": {"password": "9999", "role": "–£—á–∏—Ç–µ–ª—å", "direction": "–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥"},
}

# === –£–¢–ò–õ–ò–¢–´ === #
def get_main_menu():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ÑπÔ∏è Information", callback_data="category:Information")],
        [InlineKeyboardButton(text="üìÖ Registration", callback_data="category:Registration")],
        [InlineKeyboardButton(text="üîë User", callback_data="category:User")],
        [InlineKeyboardButton(text="üîê –ü—Ä–æ—Ñ–∏–ª—å", callback_data="category:profile")],
        [InlineKeyboardButton(text="üîç Search", callback_data="category:Search")],
        [InlineKeyboardButton(text="üì£ Complaints & Suggestions", callback_data="category:complaints")],
        [InlineKeyboardButton(text="üîó TGK Nomad", callback_data="category:TGKNomad")],
    ])

# === –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò === #
@dp.message(filters.Command('start'))
async def start(message: types.Message):
    await message.answer(f"Hello, {message.from_user.username}!\n\nPlease choose a category:", reply_markup=get_main_menu())

@dp.callback_query(lambda call: call.data.startswith('category:'))
async def handle_category(call: CallbackQuery, state: FSMContext):
    category = call.data.split(':')[1]

    match category:
        case "Information":
            await call.message.answer("‚ÑπÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é:", reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="–ö–æ–ª–ª–µ–¥–∂", callback_data="info:college")],
                [InlineKeyboardButton(text="–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏", callback_data="info:specialties")]
            ]))
        case "Registration":
            await call.message.answer("üìÖ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:", reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="–ì–æ—Å—Ç—å", callback_data="reg:guest")],
                [InlineKeyboardButton(text="–°—Ç—É–¥–µ–Ω—Ç", callback_data="reg:student")],
                [InlineKeyboardButton(text="–†–æ–¥–∏—Ç–µ–ª—å", callback_data="reg:parent")],
                [InlineKeyboardButton(text="–£—á–∏—Ç–µ–ª—å", callback_data="reg:teacher")]
            ]))
        case "User":
            await call.message.answer("üîë –í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É.\n\n–ü–æ–ª—É—á–∏—Ç–µ –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.", parse_mode="Markdown")
        case "Search":
            present = '\n'.join(present_teachers) if present_teachers else '‚ùå –£—á–∏—Ç–µ–ª–µ–π –≤ –∫–æ–ª–ª–µ–¥–∂–µ —Å–µ–π—á–∞—Å –Ω–µ—Ç.'
            await call.message.answer(f"üë®‚Äçüè´ –£—á–∏—Ç–µ–ª—è –≤ –∫–æ–ª–ª–µ–¥–∂–µ:\n{present}")
            await call.message.answer("üîç –û—Ç–º–µ—Ç–∫–∞ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏—è:", reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚úÖ –Ø –≤ –∫–æ–ª–ª–µ–¥–∂–µ", callback_data="teacher:in")],
                [InlineKeyboardButton(text="‚ùå –Ø —É—à–µ–ª", callback_data="teacher:out")]
            ]))
        case "complaints":
            await call.message.answer("üì£ –í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å:", reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üì£ –ñ–∞–ª–æ–±–∞", callback_data="complaint:file")],
                [InlineKeyboardButton(text="‚ú® –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ", callback_data="suggestion:file")]
            ]))
        case "TGKNomad":
            await call.message.answer("üîó –ù–∞—à Telegram –ö–∞–Ω–∞–ª:", reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="–ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–∞–Ω–∞–ª", url="https://t.me/+6HRrYRj2bm9kNTYy")]
            ]))
        case "profile":
            await call.message.answer("üîê –í–≤–µ–¥–∏—Ç–µ –≤–∞—à *–ª–æ–≥–∏–Ω*:", parse_mode="Markdown")
            await state.set_state(AuthState.waiting_for_login)

@dp.callback_query(lambda c: c.data.startswith("info:"))
async def info_handler(call: CallbackQuery):
    key = call.data.split(":")[1]
    if key == "college":
        await call.message.answer("üè´ –ö–æ–ª–ª–µ–¥–∂ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ 7-–∞–ø—Ä–µ–ª—è 4/3. –í–∏–¥–µ–æ:https://www.instagram.com/reel/C9MwjNWoaR1/?igsh=MXZwdWZlYTQ3cWEwNw==")
    elif key == "specialties":
        specialties = [
            ("IT", "it"), ("–î–∏–∑–∞–π–Ω–µ—Ä", "design"), ("–Æ—Ä–∏—Å–ø—Ä—É–¥–µ–Ω—Ü–∏—è", "law"),
            ("–ú–∞—Ä–∫–µ—Ç–æ–ª–æ–≥", "marketing"), ("–ü–µ—Ä–µ–≤–æ–¥—á–∏–∫–∏", "translation"),
            ("–ú–µ–Ω–µ–¥–∂–º–µ–Ω—Ç", "management"), ("–ë–∏–∑–Ω–µ—Å", "business")
        ]
        await call.message.answer("üìö –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å:", reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[[InlineKeyboardButton(text=name, callback_data=f"spec:{key}")] for name, key in specialties]
        ))

@dp.callback_query(lambda c: c.data.startswith("spec:"))
async def spec_info(call: CallbackQuery):
    prices = {
        "it": "üíª IT ‚Äî 270,000 —Å–æ–º",
        "design": "üé® –î–∏–∑–∞–π–Ω–µ—Ä ‚Äî 200,000 —Å–æ–º",
        "law": "‚öñÔ∏è –Æ—Ä–∏—Å–ø—Ä—É–¥–µ–Ω—Ü–∏—è ‚Äî 200,000 —Å–æ–º",
        "marketing": "üìä –ú–∞—Ä–∫–µ—Ç–∏–Ω–≥ ‚Äî 200,000 —Å–æ–º",
        "translation": "üåê –ü–µ—Ä–µ–≤–æ–¥—á–µ—Å–∫–æ–µ –¥–µ–ª–æ ‚Äî 200,000 —Å–æ–º",
        "management": "üìã –ú–µ–Ω–µ–¥–∂–º–µ–Ω—Ç ‚Äî 270,000 —Å–æ–º",
        "business": "üíº –§–∏–Ω–∞–Ω—Å—ã ‚Äî 200,000 —Å–æ–º",
    }
    await call.message.answer(prices.get(call.data.split(":")[1], "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞."))

@dp.callback_query(lambda c: c.data.startswith("reg:"))
async def registration_handler(call: CallbackQuery):
    role = call.data.split(":")[1]
    if role == "guest":
        await call.message.answer("üëã –ö–∞–∫ –≥–æ—Å—Ç—å –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å—Ç–æ –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π.")
    else:
        number = random.randint(1000, 9999)
        login = f"{role.upper()}-{number}"
        await call.message.answer(f"‚úçÔ∏è –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∫–∞–∫ {role.title()}!\nüîê –õ–æ–≥–∏–Ω: {login}\nüîë –ü–∞—Ä–æ–ª—å: {number}")

@dp.callback_query(lambda c: c.data.startswith("teacher:"))
async def teacher_presence(call: CallbackQuery):
    user = call.from_user.full_name
    status = call.data.split(":")[1]
    if status == "in":
        present_teachers.add(user)
        await call.message.answer("‚úÖ –í—ã –æ—Ç–º–µ—Ç–∏–ª–∏—Å—å –∫–∞–∫ *–≤ –∫–æ–ª–ª–µ–¥–∂–µ*", parse_mode="Markdown")
    else:
        present_teachers.discard(user)
        await call.message.answer("‚ùå –í—ã –æ—Ç–º–µ—Ç–∏–ª–∏—Å—å –∫–∞–∫ *—É—à–ª–∏*", parse_mode="Markdown")

@dp.callback_query(lambda c: c.data.endswith(":file"))
async def feedback_handler(call: CallbackQuery, state: FSMContext):
    action = call.data.split(":")[0]
    state_map = {
        "complaint": FeedbackState.complaint,
        "suggestion": FeedbackState.suggestion
    }
    prompts = {
        "complaint": "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ –≤–∞—à—É *–∂–∞–ª–æ–±—É*:",
        "suggestion": "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ *–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ*:"
    }
    await call.message.answer(prompts[action], parse_mode="Markdown")
    await state.set_state(state_map[action])

@dp.message(FeedbackState.complaint)
async def save_complaint(message: types.Message, state: FSMContext):
    await message.answer("üì£ –í–∞—à–∞ –∂–∞–ª–æ–±–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞. –°–ø–∞—Å–∏–±–æ!")
    await state.clear()

@dp.message(FeedbackState.suggestion)
async def save_suggestion(message: types.Message, state: FSMContext):
    await message.answer("‚ú® –í–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ. –°–ø–∞—Å–∏–±–æ!")
    await state.clear()

@dp.message(AuthState.waiting_for_login)
async def auth_login(message: types.Message, state: FSMContext):
    await state.update_data(login=message.text.strip().upper())
    await message.answer("üîë –í–≤–µ–¥–∏—Ç–µ –≤–∞—à *–ø–∞—Ä–æ–ª—å*:", parse_mode="Markdown")
    await state.set_state(AuthState.waiting_for_password)

@dp.message(AuthState.waiting_for_password)
async def auth_password(message: types.Message, state: FSMContext):
    data = await state.get_data()
    login = data.get("login")
    password = message.text.strip()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–∏–Ω–∞ –∏ –ø–∞—Ä–æ–ª—è
    if login in fake_users and fake_users[login]["password"] == password:
        # –£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è, –≤—ã–≤–æ–¥–∏–º –¥–∞–Ω–Ω—ã–µ
        user_info = fake_users[login]
        role = user_info["role"]
        direction = user_info["direction"]
        await message.answer(f"‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –≤–æ—à–ª–∏ –≤ —Å–∏—Å—Ç–µ–º—É!\n\n*–†–æ–ª—å:* {role}\n*–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:* {direction}")
    else:
        # –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        await state.set_state(AuthState.waiting_for_login)

if __name__ == "__main__":
    asyncio.run(dp.start_polling(bot)) 
@dp.callback_query(lambda c: c.data == "reg:parent")
async def register_parent(call: CallbackQuery):
    number = random.randint(1000, 9999)
    login = f"PARENT-{number}"
    password = str(number)

    fake_users[login] = {
        "password": password,
        "role": "–†–æ–¥–∏—Ç–µ–ª—å",
        "direction": "–Æ—Ä–∏—Å–ø—Ä—É–¥–µ–Ω—Ü–∏—è"
    }

    await call.message.answer(
        f"üë®‚Äçüë©‚Äçüëß –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∫–∞–∫ –†–æ–¥–∏—Ç–µ–ª—å!\n\n"
        f"üîê *–õ–æ–≥–∏–Ω:* `{login}`\n"
        f"üîë *–ü–∞—Ä–æ–ª—å:* `{password}`\n\n"
        f"–°–æ—Ö—Ä–∞–Ω–∏—Ç–µ —ç—Ç–∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Ö–æ–¥–∞ –≤ –ø—Ä–æ—Ñ–∏–ª—å.",
        parse_mode="Markdown"
    )
    @dp.callback_query(lambda c: c.data == "reg:teacher")
    async def register_teacher(call: CallbackQuery):
        number = random.randint(1000, 9999)
    login = f"TEACHER-{number}"
    password = str(number)

    fake_users[login] = {
        "password": password,
        "role": "–£—á–∏—Ç–µ–ª—å",
        "direction": "–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥"
    }

    await call.message.answer(
        f"üë®‚Äçüè´ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∫–∞–∫ –£—á–∏—Ç–µ–ª—å!\n\n"
        f"üîê *–õ–æ–≥–∏–Ω:* `{login}`\n"
        f"üîë *–ü–∞—Ä–æ–ª—å:* `{password}`\n\n"
        f"–°–æ—Ö—Ä–∞–Ω–∏—Ç–µ —ç—Ç–∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Ö–æ–¥–∞ –≤ –ø—Ä–æ—Ñ–∏–ª—å.",
        parse_mode="Markdown"
    )

import mysql.connector
from mysql.connector import Error

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
def connect():
    try:
        connection = mysql.connector.connect(
            host='localhost',
            database='college_bot',
            user='root',
            password='your_password_here'  # ‚ùóÔ∏è–∑–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π –ø–∞—Ä–æ–ª—å
        )
        return connection
    except Error as e:
        print("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MySQL", e)
        return None


# –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è)
def add_user(login, password, role, direction):
    conn = connect()
    if conn:
        try:
            cursor = conn.cursor()
            cursor.execute("""
                INSERT INTO users (login, password, role, direction)
                VALUES (%s, %s, %s, %s)
            """, (login, password, role, direction))
            conn.commit()
            print(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {login} –¥–æ–±–∞–≤–ª–µ–Ω")
        except Error as e:
            print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", e)
        finally:
            conn.close()


# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
def authenticate_user(login, password):
    conn = connect()
    if conn:
        try:
            cursor = conn.cursor(dictionary=True)
            cursor.execute("""
                SELECT * FROM users WHERE login = %s AND password = %s
            """, (login, password))
            user = cursor.fetchone()
            return user
        except Error as e:
            print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:", e)
            return None
        finally:
            conn.close()

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ä–æ–¥–∏—Ç–µ–ª—è
add_user("PARENT-1111", "1111", "–†–æ–¥–∏—Ç–µ–ª—å", "–Æ—Ä–∏—Å–ø—Ä—É–¥–µ–Ω—Ü–∏—è")

# –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
user = authenticate_user("PARENT-1111", "1111")
if user:
    print(f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user['role']}!")
    print(f"–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {user['direction']}")
else:
    print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å.")





#plgn
from aiogram import types
from aiogram.types import CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Å–±–æ—Ä–∞ –∂–∞–ª–æ–±—ã
class ComplaintState(StatesGroup):
    waiting_for_complaint = State()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞ –∫–æ–º–∞–Ω–¥—É –∂–∞–ª–æ–±—ã
@dp.callback_query(lambda c: c.data == "complaint:file")
async def complaint_handler(call: CallbackQuery, state: FSMContext):
    await call.message.answer("üì£ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ –≤–∞—à—É *–∂–∞–ª–æ–±—É*:", parse_mode="Markdown")
    await state.set_state(ComplaintState.waiting_for_complaint)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–∞ –∂–∞–ª–æ–±—ã
@dp.message(ComplaintState.waiting_for_complaint)
async def save_complaint(message: types.Message, state: FSMContext):
    complaint_text = message.text.strip()

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∂–∞–ª–æ–±—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    user_id = message.from_user.id
    connection = mysql.connector.connect(
        host='localhost',
        user='root',
        password='password',
        database='college_bot'
    )
    cursor = connection.cursor()

    cursor.execute("INSERT INTO complaints (user_id, complaint_text) VALUES (%s, %s)", (user_id, complaint_text))
    connection.commit()

    cursor.close()
    connection.close()

    await message.answer("üì£ –í–∞—à–∞ –∂–∞–ª–æ–±–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞. –°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ!")
    await state.clear()





#no2
# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Å–±–æ—Ä–∞ –æ—Ç–∑—ã–≤–∞
class FeedbackState(StatesGroup):
    waiting_for_feedback = State()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞ –∫–æ–º–∞–Ω–¥—É –æ—Ç–∑—ã–≤–∞
@dp.callback_query(lambda c: c.data == "suggestion:file")
async def feedback_handler(call: CallbackQuery, state: FSMContext):
    await call.message.answer("‚ú® –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à *–æ—Ç–∑—ã–≤*:", parse_mode="Markdown")
    await state.set_state(FeedbackState.waiting_for_feedback)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–∞ –æ—Ç–∑—ã–≤–∞
@dp.message(FeedbackState.waiting_for_feedback)
async def save_feedback(message: types.Message, state: FSMContext):
    feedback_text = message.text.strip()

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç–∑—ã–≤–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    user_id = message.from_user.id
    connection = mysql.connector.connect(
        host='localhost',
        user='root',
        password='password',
        database='college_bot'
    )
    cursor = connection.cursor()

    cursor.execute("INSERT INTO feedback (user_id, feedback_text) VALUES (%s, %s)", (user_id, feedback_text))
    connection.commit()

    cursor.close()
    connection.close()

    await message.answer("‚ú® –í–∞—à –æ—Ç–∑—ã–≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω. –°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à–µ –º–Ω–µ–Ω–∏–µ!")
    await state.clear()



#no3
@dp.message(commands=["view_complaints"])
async def view_complaints(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∂–∞–ª–æ–±.")
        return

    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    connection = mysql.connector.connect(
        host='localhost',
        user='root',
        password='password',
        database='college_bot'
    )
    cursor = connection.cursor()

    cursor.execute("SELECT user_id, complaint_text, created_at FROM complaints")
    complaints = cursor.fetchall()

    if complaints:
        response = "üì£ –í—Å–µ –∂–∞–ª–æ–±—ã:\n\n"
        for complaint in complaints:
            response += f"ID –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {complaint[0]}\n–ñ–∞–ª–æ–±–∞: {complaint[1]}\n–î–∞—Ç–∞: {complaint[2]}\n\n"
    else:
        response = "‚ùå –ù–µ—Ç –∂–∞–ª–æ–±."

    await message.answer(response)
    cursor.close()
    connection.close()





#no4
@dp.message(commands=["view_feedback"])
async def view_feedback(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ—Ç–∑—ã–≤–æ–≤.")
        return

    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    connection = mysql.connector.connect(
        host='localhost',
        user='root',
        password='password',
        database='college_bot'
    )
    cursor = connection.cursor()

    cursor.execute("SELECT user_id, feedback_text, created_at FROM feedback")
    feedback = cursor.fetchall()

    if feedback:
        response = "‚ú® –í—Å–µ –æ—Ç–∑—ã–≤—ã:\n\n"
        for fb in feedback:
            response += f"ID –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {fb[0]}\n–û—Ç–∑—ã–≤: {fb[1]}\n–î–∞—Ç–∞: {fb[2]}\n\n"
    else:
        response = "‚ùå –ù–µ—Ç –æ—Ç–∑—ã–≤–æ–≤."

    await message.answer(response)
    cursor.close()
    connection.close()




#5
# –ü—Ä–∏–º–µ—Ä –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ—Ç–∑—ã–≤–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
import mysql.connector

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
db = mysql.connector.connect(
    host="localhost",
    user="root",
    password="your_password",
    database="college_bot"
)

cursor = db.cursor()

def save_feedback(user_id, feedback_text):
    query = "INSERT INTO feedback (user_id, feedback_text, created_at) VALUES (%s, %s, NOW())"
    cursor.execute(query, (user_id, feedback_text))
    db.commit()
    print(f"–û—Ç–∑—ã–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –¥–æ–±–∞–≤–ª–µ–Ω.")


#6
def get_feedback():
    query = "SELECT * FROM feedback ORDER BY created_at DESC"
    cursor.execute(query)
    feedback = cursor.fetchall()

    for row in feedback:
        print(f"–û—Ç–∑—ã–≤ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {row[1]}: {row[2]}")



#7
@dp.callback_query(lambda c: c.data == "view_feedback")
async def view_feedback(call: CallbackQuery):
    query = "SELECT * FROM feedback ORDER BY created_at DESC"
    cursor.execute(query)
    feedback = cursor.fetchall()
    
    if feedback:
        for row in feedback:
            await call.message.answer(f"–û—Ç–∑—ã–≤ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {row[1]}: {row[2]}")
    else:
        await call.message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –æ—Ç–∑—ã–≤–æ–≤.")



#8
from aiogram import types
from aiogram.types import CallbackQuery
import mysql.connector

db = mysql.connector.connect(
    host="localhost",
    user="root",
    password="your_password",
    database="college_bot"
)

cursor = db.cursor()

@dp.message()
async def handle_feedback(message: types.Message):
    feedback_text = message.text.strip()
    
    if feedback_text:
        user_id = message.from_user.id  # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        query = "INSERT INTO feedback (user_id, feedback_text, created_at) VALUES (%s, %s, NOW())"
        cursor.execute(query, (user_id, feedback_text))
        db.commit()
        
        await message.answer("–í–∞—à –æ—Ç–∑—ã–≤ –±—ã–ª —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω! –°–ø–∞—Å–∏–±–æ!")
    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –æ—Ç–∑—ã–≤.")



#9
import mysql.connector

try:
    db = mysql.connector.connect(
        host="localhost",
        user="root",  # –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤–∞—à –ª–æ–≥–∏–Ω
        password="your_password",  # –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤–∞—à –ø–∞—Ä–æ–ª—å
        database="college_bot"  # –ù–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    )
    cursor = db.cursor()
    print("–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
except mysql.connector.Error as err:
    print(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {err}")



#10
import mysql.connector

db = mysql.connector.connect(
    host="localhost",
    user="root",  # –í–∞—à –ª–æ–≥–∏–Ω
    password="your_password",  # –í–∞—à –ø–∞—Ä–æ–ª—å
    database="college_bot"  # –ù–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
)

cursor = db.cursor()

def save_feedback(user_id, feedback_text):
    query = "INSERT INTO feedback (user_id, feedback_text, created_at) VALUES (%s, %s, NOW())"
    cursor.execute(query, (user_id, feedback_text))
    db.commit()
    print(f"–û—Ç–∑—ã–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –¥–æ–±–∞–≤–ª–µ–Ω.")

# –ü—Ä–∏–º–µ—Ä –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ—Ç–∑—ã–≤–∞
save_feedback(12345, "–û—Ç–ª–∏—á–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ!")






#register
import random
import string

# –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å–ª—É—á–∞–π–Ω–æ–≥–æ –ª–æ–≥–∏–Ω–∞ –∏ –ø–∞—Ä–æ–ª—è
def generate_credentials():
    login = 'user' + ''.join(random.choices(string.digits, k=5))
    password = ''.join(random.choices(string.ascii_letters + string.digits, k=8))
    return login, password



#register2
@dp.message_handler(commands=['register'])
async def register_user(message: types.Message):
    telegram_id = message.from_user.id

    # –ü—Ä–æ–≤–µ—Ä–∫–∞: –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    conn = connect()
    cursor = conn.cursor()
    cursor.execute("SELECT * FROM users WHERE telegram_id = %s", (telegram_id,))
    user = cursor.fetchone()

    if user:
        await message.answer("–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.")
        return

    # –ó–∞–ø—Ä–æ—Å —Ä–æ–ª–∏
    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(KeyboardButton("—Å—Ç—É–¥–µ–Ω—Ç"), KeyboardButton("—Ä–æ–¥–∏—Ç–µ–ª—å"), KeyboardButton("—É—á–∏—Ç–µ–ª—å"))
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É —Ä–æ–ª—å:", reply_markup=markup)
    await Registration.role.set()


@dp.message_handler(state=Registration.role)
async def process_role(message: types.Message, state: FSMContext):
    role = message.text.lower()
    if role not in ['—Å—Ç—É–¥–µ–Ω—Ç', '—Ä–æ–¥–∏—Ç–µ–ª—å', '—É—á–∏—Ç–µ–ª—å']:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å –∏–∑ —Å–ø–∏—Å–∫–∞.")
        return

    await state.update_data(role=role)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:", reply_markup=ReplyKeyboardRemove())
    await Registration.next()


@dp.message_handler(state=Registration.name)
async def process_name(message: types.Message, state: FSMContext):
    name = message.text
    user_data = await state.get_data()
    role = user_data['role']
    telegram_id = message.from_user.id

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ª–æ–≥–∏–Ω–∞ –∏ –ø–∞—Ä–æ–ª—è
    login, password = generate_credentials()

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ë–î
    conn = connect()
    cursor = conn.cursor()
    cursor.execute("INSERT INTO users (telegram_id, role, name, login, password) VALUES (%s, %s, %s, %s, %s)",
                   (telegram_id, role, name, login, password))
    conn.commit()
    cursor.close()
    conn.close()

    await message.answer(
        f"–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!\n\n"
        f"üÜî –í–∞—à –ª–æ–≥–∏–Ω: <code>{login}</code>\n"
        f"üîë –ü–∞—Ä–æ–ª—å: <code>{password}</code>\n\n"
        f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç–∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Ö–æ–¥–∞.",
        parse_mode="HTML"
    )
    await state.finish()



#register3
@dp.message_handler(commands=['login'])
async def login_start(message: types.Message):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ª–æ–≥–∏–Ω:")
    await Login.login.set()


@dp.message_handler(state=Login.login)
async def process_login_step(message: types.Message, state: FSMContext):
    await state.update_data(login=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:")
    await Login.next()


@dp.message_handler(state=Login.password)
async def process_password_step(message: types.Message, state: FSMContext):
    user_data = await state.get_data()
    login = user_data['login']
    password = message.text

    conn = connect()
    cursor = conn.cursor()
    cursor.execute("SELECT * FROM users WHERE login = %s AND password = %s", (login, password))
    user = cursor.fetchone()
    cursor.close()
    conn.close()

    if user:
        await message.answer(f"‚úÖ –£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥. –í–∞—à–∞ —Ä–æ–ª—å: {user[2]}")
        await state.finish()
    else:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        await state.finish()







